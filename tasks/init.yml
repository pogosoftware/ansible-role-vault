---

- name: Create unseal directories
  file:
    path: "{{ vault_unseal_keys_dir }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0755
    state: directory

- name: Check if vault is initialised
  shell: 'vault operator init -status'
  environment:
    VAULT_ADDR: "{{ vault_protocol }}://{{ vault_listener.tcp.address }}:{{  vault_listener.tcp.port }}"
    VAULT_CLIENT_CERT: "{{ vault_tls_client_cert }}"
    VAULT_CLIENT_KEY: "{{ vault_tls_client_cert_key }}"
    VAULT_CACERT: "{{ vault_tls_ca_cert }}"

  register: vault_init_status
  failed_when: vault_init_status.rc == 1
  tags:
    - skip_ansible_lint

- name: Initialise vault
  when: vault_init_status.stdout != 'Vault is initialized'
  shell: "vault operator init -key-shares={{ vault_key_shares }} -key-threshold={{ vault_key_threshold }} -format json"
  environment:
    VAULT_ADDR: "{{ vault_protocol }}://{{ vault_listener.tcp.address }}:{{  vault_listener.tcp.port }}"
    VAULT_CLIENT_CERT: "{{ vault_tls_client_cert }}"
    VAULT_CLIENT_KEY: "{{ vault_tls_client_cert_key }}"
    VAULT_CACERT: "{{ vault_tls_ca_cert }}"
  register: vault_init_results
  tags:
    - skip_ansible_lint

- name: Parse output of vault init
  when: vault_init_status.stdout != 'Vault is initialized'
  set_fact:
    vault_init_parsed: "{{ vault_init_results.stdout | from_json }}"

- name: Write unseal keys to files
  when: vault_init_status.stdout != 'Vault is initialized'
  copy:
    dest: "{{ vault_unseal_keys_dir }}/unseal_key_{{ item.0 }}"
    content: "{{ item.1 }}"
  with_indexed_items: "{{ vault_init_parsed.unseal_keys_hex }}"

- name: Write root token to file
  when: vault_init_status.stdout != 'Vault is initialized'
  copy:
    content: "{{ vault_init_parsed.root_token }}"
    dest: "{{ vault_unseal_keys_dir }}/rootkey"